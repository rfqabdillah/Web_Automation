{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-24T12:10:59.687Z",
    "end": "2025-06-24T12:11:13.312Z",
    "duration": 13625,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f2ab1030-1e85-4206-ac0b-00d6846e0532",
      "title": "",
      "fullFile": "C:\\Users\\ACER\\Web_Automation\\tests\\test-sauce.js",
      "file": "\\tests\\test-sauce.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "deed457f-4145-4608-90dd-12a7995feea0",
          "title": "SauceDemo Automation Test",
          "fullFile": "C:\\Users\\ACER\\Web_Automation\\tests\\test-sauce.js",
          "file": "\\tests\\test-sauce.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"SauceDemo Automation Test\"",
              "fullTitle": "SauceDemo Automation Test \"before all\" hook in \"SauceDemo Automation Test\"",
              "timedOut": false,
              "duration": 3423,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('firefox').build();",
              "err": {},
              "uuid": "a5286663-582b-4990-9f88-b5177765487a",
              "parentUUID": "deed457f-4145-4608-90dd-12a7995feea0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"SauceDemo Automation Test\"",
              "fullTitle": "SauceDemo Automation Test \"before each\" hook in \"SauceDemo Automation Test\"",
              "timedOut": false,
              "duration": 122,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Selalu buka halaman login sebelum setiap mulai test\nawait driver.get('https://www.saucedemo.com');",
              "err": {},
              "uuid": "abb4269d-aa70-4550-8f62-7ed49567b142",
              "parentUUID": "deed457f-4145-4608-90dd-12a7995feea0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"SauceDemo Automation Test\"",
              "fullTitle": "SauceDemo Automation Test \"after all\" hook in \"SauceDemo Automation Test\"",
              "timedOut": false,
              "duration": 908,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "71690f1a-a9d7-4fd2-932c-50e08e8f91fa",
              "parentUUID": "deed457f-4145-4608-90dd-12a7995feea0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"SauceDemo Automation Test\"",
              "fullTitle": "SauceDemo Automation Test \"after each\" hook in \"SauceDemo Automation Test\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const menuButton = await driver.findElement(By.id('react-burger-menu-btn'));\n  await menuButton.click();\n  await driver.wait(until.elementLocated(By.id('logout_sidebar_link')), 10000);\n  const logoutLink = await driver.findElement(By.id('logout_sidebar_link'));\n  await logoutLink.click();\n  await driver.wait(until.elementLocated(By.css('[data-test=\"login-button\"]')), 10000);\n} catch (err) {\n  // kalau tidak bisa logout (misalnya karena gagal login), abaikan error ini\n}",
              "err": {},
              "uuid": "219e6da3-8011-4350-8d0c-990732f5284c",
              "parentUUID": "deed457f-4145-4608-90dd-12a7995feea0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Valid Login",
              "fullTitle": "SauceDemo Automation Test Valid Login",
              "timedOut": false,
              "duration": 478,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await loginToSauceDemo();\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, 'https://www.saucedemo.com/inventory.html', 'URL after login does not match');",
              "err": {},
              "uuid": "0c2476e1-142a-423b-a827-90e832b7877b",
              "parentUUID": "deed457f-4145-4608-90dd-12a7995feea0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sort Products from A to Z",
              "fullTitle": "SauceDemo Automation Test Sort Products from A to Z",
              "timedOut": false,
              "duration": 2705,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await loginToSauceDemo();\nconst sortDropdown = await driver.findElement(By.css('[data-test=\"product-sort-container\"]'));\nawait sortDropdown.findElement(By.css('option[value=\"az\"]')).click();\nawait driver.sleep(2000);\nconst productNameElements = await driver.findElements(By.className('inventory_item_name'));\nconst productNames = [];\nfor (let el of productNameElements) {\n  productNames.push(await el.getText());\n}\nconst sortedNames = [...productNames].sort((a, b) => a.localeCompare(b));\nassert.deepStrictEqual(productNames, sortedNames, 'Products are not sorted from A to Z');",
              "err": {},
              "uuid": "98b1b5dd-a45c-4fb7-bac7-5f5e5d97e941",
              "parentUUID": "deed457f-4145-4608-90dd-12a7995feea0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sort Products From Low to High",
              "fullTitle": "SauceDemo Automation Test Sort Products From Low to High",
              "timedOut": false,
              "duration": 2618,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await loginToSauceDemo();\nconst sortDropdown = await driver.findElement(By.css('[data-test=\"product-sort-container\"]'));\nawait sortDropdown.findElement(By.css('option[value=\"lohi\"]')).click();\nawait driver.sleep(2000);\nconst priceElements = await driver.findElements(By.className('inventory_item_price'));\nconst prices = [];\nfor (let el of priceElements) {\n  const text = await el.getText();\n  prices.push(parseFloat(text.replace('$', '')));\n}\nconst sortedPrices = [...prices].sort((a, b) => a - b);\nassert.deepStrictEqual(prices, sortedPrices, 'Product prices are not sorted from lowest to highest');",
              "err": {},
              "uuid": "6af9d224-e7e0-4c38-8002-f18fdca63510",
              "parentUUID": "deed457f-4145-4608-90dd-12a7995feea0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successful Logout",
              "fullTitle": "SauceDemo Automation Test Successful Logout",
              "timedOut": false,
              "duration": 786,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await loginToSauceDemo();\nconst menuButton = await driver.findElement(By.id('react-burger-menu-btn'));\nawait menuButton.click();\nawait driver.wait(until.elementLocated(By.id('logout_sidebar_link')), 10000);\nconst logoutLink = await driver.findElement(By.id('logout_sidebar_link'));\nawait logoutLink.click();\nawait driver.wait(until.elementLocated(By.css('[data-test=\"login-button\"]')), 10000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, 'https://www.saucedemo.com/', 'Failed to logout');",
              "err": {},
              "uuid": "025d6de2-7a8f-4cf9-99e7-a169b4eb7fe4",
              "parentUUID": "deed457f-4145-4608-90dd-12a7995feea0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c2476e1-142a-423b-a827-90e832b7877b",
            "98b1b5dd-a45c-4fb7-bac7-5f5e5d97e941",
            "6af9d224-e7e0-4c38-8002-f18fdca63510",
            "025d6de2-7a8f-4cf9-99e7-a169b4eb7fe4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6587,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}