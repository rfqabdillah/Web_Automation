{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-29T06:02:38.303Z",
    "end": "2025-06-29T06:02:54.689Z",
    "duration": 16386,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8531e149-3d2c-45ed-8f1b-47a8651fdf4e",
      "title": "",
      "fullFile": "C:\\Users\\ACER\\Web_Automation\\tests\\test_sauce.js",
      "file": "\\tests\\test_sauce.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
          "title": "SauceDemo Automation Test",
          "fullFile": "C:\\Users\\ACER\\Web_Automation\\tests\\test_sauce.js",
          "file": "\\tests\\test_sauce.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"SauceDemo Automation Test\"",
              "fullTitle": "SauceDemo Automation Test \"before all\" hook in \"SauceDemo Automation Test\"",
              "timedOut": false,
              "duration": 3340,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('firefox').build();\npage_login = new PageLogin(driver);\npage_inventory = new PageInventory(driver);",
              "err": {},
              "uuid": "5ab03b22-c717-4640-9300-2e5d1e660399",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"SauceDemo Automation Test\"",
              "fullTitle": "SauceDemo Automation Test \"before each\" hook in \"SauceDemo Automation Test\"",
              "timedOut": false,
              "duration": 151,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Selalu buka halaman login sebelum setiap mulai test\nawait driver.get(BASE_URL);",
              "err": {},
              "uuid": "16029bd8-6e61-451a-8da0-7c0cc5753f0e",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"SauceDemo Automation Test\"",
              "fullTitle": "SauceDemo Automation Test \"after all\" hook in \"SauceDemo Automation Test\"",
              "timedOut": false,
              "duration": 1108,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "bbd7385c-a591-4662-bc33-0173ccd00cee",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"SauceDemo Automation Test\"",
              "fullTitle": "SauceDemo Automation Test \"after each\" hook in \"SauceDemo Automation Test\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await page_inventory.logoutFromSaucedemo();\n  await driver.wait(until.elementLocated(PageLogin.ButtonLogin), 10000);\n} catch (err) {\n  // console.warn(\"Logout skipped: not logged in or logout elements not found\");\n}",
              "err": {},
              "uuid": "0dccddd0-9235-4758-a19d-2c97d9bd4167",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Valid Login",
              "fullTitle": "SauceDemo Automation Test Valid Login",
              "timedOut": false,
              "duration": 506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo(VALID_USERNAME, VALID_PASSWORD, true);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, `${BASE_URL}inventory.html`, 'URL after login does not match');",
              "err": {},
              "uuid": "8d893f3b-329a-4fa6-9098-b6a497ab5b8f",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid Username",
              "fullTitle": "SauceDemo Automation Test Invalid Username",
              "timedOut": false,
              "duration": 360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo('standard_use', VALID_PASSWORD, false);\n  \nconst textError = await page_login.getErrorText();\nassert.strictEqual(textError, 'Epic sadface: Username and password do not match any user in this service')",
              "err": {},
              "uuid": "9cb199e1-6f8d-4c31-9d16-81fd116b0239",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid Password",
              "fullTitle": "SauceDemo Automation Test Invalid Password",
              "timedOut": false,
              "duration": 317,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo(VALID_USERNAME, 'wrong_password', false);\nconst textError = await page_login.getErrorText();\nassert.strictEqual(textError, 'Epic sadface: Username and password do not match any user in this service')",
              "err": {},
              "uuid": "0d6e1a5d-208d-4faa-99e4-9eafa25a7d23",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty Username",
              "fullTitle": "SauceDemo Automation Test Empty Username",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo('',VALID_PASSWORD, false);\n\nconst textError = await page_login.getErrorText();\nassert.strictEqual(textError, 'Epic sadface: Username is required')",
              "err": {},
              "uuid": "3de68356-b918-4ae8-948d-ef5a88f050f4",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty Password",
              "fullTitle": "SauceDemo Automation Test Empty Password",
              "timedOut": false,
              "duration": 288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo(VALID_USERNAME, '', false);\nconst textError = await page_login.getErrorText();\nassert.strictEqual(textError, 'Epic sadface: Password is required')",
              "err": {},
              "uuid": "3baba98c-2ed0-42c8-b0ea-f96d322a1a6c",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sort Products from A to Z",
              "fullTitle": "SauceDemo Automation Test Sort Products from A to Z",
              "timedOut": false,
              "duration": 706,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo(VALID_USERNAME, VALID_PASSWORD, true);\nconst sortDropdown = await driver.findElement(PageInventory.DropdownSort);\nawait sortDropdown.findElement(PageInventory.SortAZ).click();\nawait driver.wait(until.elementsLocated(PageInventory.ProductNameElements), 5000);\n\nconst productNames = await page_inventory.getProductNames();\nconst sortedNames = [...productNames].sort((a, b) => a.localeCompare(b));\nassert.deepStrictEqual(productNames, sortedNames, 'Products are not sorted from A to Z');",
              "err": {},
              "uuid": "99c2954f-661a-407a-83ef-127e98d97765",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sort Products From Z to A",
              "fullTitle": "SauceDemo Automation Test Sort Products From Z to A",
              "timedOut": false,
              "duration": 683,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo(VALID_USERNAME, VALID_PASSWORD, true);\nconst sortDropdown = await driver.findElement(PageInventory.DropdownSort);\nawait sortDropdown.findElement(PageInventory.SortZA).click();\nawait driver.wait(until.elementsLocated(PageInventory.ProductNameElements), 5000);\nconst productNames = await page_inventory.getProductNames();\nconst sortedNames = [...productNames].sort((a, b) => b.localeCompare(a));\nassert.deepStrictEqual(productNames, sortedNames, 'Products are not sorted from Z to A');",
              "err": {},
              "uuid": "71d1dd53-bc65-40b5-a083-c2a725b4b49c",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sort Products From Low to High",
              "fullTitle": "SauceDemo Automation Test Sort Products From Low to High",
              "timedOut": false,
              "duration": 699,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo(VALID_USERNAME, VALID_PASSWORD, true);\nconst sortDropdown = await driver.findElement(PageInventory.DropdownSort);\nawait sortDropdown.findElement(PageInventory.SortLoHi).click();\nawait driver.wait(until.elementsLocated(PageInventory.PriceElements), 5000);\nconst prices = await page_inventory.getProductPrices();\nconst sortedPrices = [...prices].sort((a, b) => a - b);\nassert.deepStrictEqual(prices, sortedPrices, 'Product prices are not sorted from lowest to highest');",
              "err": {},
              "uuid": "1abff5fc-9d08-4c41-bc26-34a292c0888b",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sort Products From High to Low",
              "fullTitle": "SauceDemo Automation Test Sort Products From High to Low",
              "timedOut": false,
              "duration": 654,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo(VALID_USERNAME, VALID_PASSWORD, true);\nconst sortDropdown = await driver.findElement(PageInventory.DropdownSort);\nawait sortDropdown.findElement(PageInventory.SortHiLo).click();\nawait driver.wait(until.elementsLocated(PageInventory.PriceElements), 5000);\nconst prices = await page_inventory.getProductPrices();\nconst sortedPrices = [...prices].sort((a, b) => b - a);\nassert.deepStrictEqual(prices, sortedPrices, 'Product prices are not sorted from highest to lowest');",
              "err": {},
              "uuid": "4d5efc01-8d9a-4957-848e-e8da8ad537d7",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successful Logout",
              "fullTitle": "SauceDemo Automation Test Successful Logout",
              "timedOut": false,
              "duration": 871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo(VALID_USERNAME, VALID_PASSWORD, true);\nawait page_inventory.logoutFromSaucedemo();\nawait driver.wait(until.elementLocated(PageLogin.ButtonLogin), 10000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, BASE_URL, 'Failed to logout');",
              "err": {},
              "uuid": "4c8a8cae-0443-4b50-af59-007f9587d069",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should Prevent Access to Inventory Page After Logout",
              "fullTitle": "SauceDemo Automation Test Should Prevent Access to Inventory Page After Logout",
              "timedOut": false,
              "duration": 1083,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await page_login.loginToSauceDemo(VALID_USERNAME, VALID_PASSWORD, true);\nawait page_inventory.logoutFromSaucedemo();\nawait driver.get(`${BASE_URL}inventory.html`);\nawait driver.wait(until.elementLocated(PageLogin.ButtonLogin), 10000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, BASE_URL, 'User should be redirected to login page when trying to access inventory after logout'\n);",
              "err": {},
              "uuid": "cf3b56bb-91f7-4a2c-9212-88998a7ffbdc",
              "parentUUID": "1a265be5-8a70-4c3e-bb14-73fb9250b8e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d893f3b-329a-4fa6-9098-b6a497ab5b8f",
            "9cb199e1-6f8d-4c31-9d16-81fd116b0239",
            "0d6e1a5d-208d-4faa-99e4-9eafa25a7d23",
            "3de68356-b918-4ae8-948d-ef5a88f050f4",
            "3baba98c-2ed0-42c8-b0ea-f96d322a1a6c",
            "99c2954f-661a-407a-83ef-127e98d97765",
            "71d1dd53-bc65-40b5-a083-c2a725b4b49c",
            "1abff5fc-9d08-4c41-bc26-34a292c0888b",
            "4d5efc01-8d9a-4957-848e-e8da8ad537d7",
            "4c8a8cae-0443-4b50-af59-007f9587d069",
            "cf3b56bb-91f7-4a2c-9212-88998a7ffbdc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6522,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}